#include <windows.h>
#include <alloc.h>
#include <stdlib.h>
#include "lk.h"
#include "km.h"

extern FRAME FAR Frame;
extern char FAR FullPath[128];

/*
ﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁ
ﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁ STRUCT ﬁﬁﬁ
ﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁﬁ
*/
/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø
≥                                                                 ≥ Register ≥
≥                                                                 ¿ƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL STRUCT::Register ( VOID ) {

	WNDCLASS wc;

	wc.style         = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc   = StructWndProc;
	wc.cbClsExtra    = 0;
	wc.cbWndExtra    = sizeof(LPSTRUCT);   // Ñ´Ô Â‡†≠•≠®Ô ì™†ß†‚•´Ô ≠† Æ°Í•™‚
	wc.hInstance     = Frame.hInstance;
	wc.hIcon         = LoadIcon ( Frame.hInstance, "struct" );
	wc.hCursor       = 0;
	wc.hbrBackground = COLOR_APPWORKSPACE + 1;
	wc.lpszMenuName  = NULL;
	wc.lpszClassName = STRUCT::Name;

	if ( ! RegisterClass ( & wc ) ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTREGISTER );
		return FALSE;
		}

	return TRUE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒø
≥ é‚™‡Î‚Ï Æ™≠Æ ·‚‡„™‚„‡Î                                              ≥ Open ≥
≥                                                                     ¿ƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
int STRUCT::Open ( LPSTR Path ) {
	LPSTRUCT tis;

	// ÇÎ§•´®‚Ï Ø†¨Ô‚Ï §´Ô Æ°Í•™‚† STRUCT
	tis = (LPSTRUCT) farmalloc ( sizeof(STRUCT) );
	if ( tis == NULL ) {
		ErrorMessager  ( Frame.hwndFrame, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTALLOC );
		return LKE_ALLOCMEM;
		}

	// à≠®Ê®†´®ß®‡Æ¢†‚Ï •£Æ ØÆ´Ô
	tis->KBase = KBASE::OpenKBase ( Path );
	if ( KBASE::Error != LKE_SUCCESS ) {
		ErrorMessager  ( Frame.hwndFrame, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTALLOC );
		farfree ( tis );
		return IDS_CANTALLOC;                        // ????????????????????
		}

	// Ñ†´Ï≠•©Ë†Ô ®≠®Ê®†´®ß†Ê®Ô ØÆ´•©
	tis->SplitState = IDM_VIEWNONE;
	tis->Part       = 0.6;
	tis->CurFocus   = IDM_ATT_LISTBOX;

	MDICREATESTRUCT mcs;
	char sz[80] = TITLE_STRUCT;

	if ( Path ) lstrcat ( sz, GetPathName ( Path ) );
	else        lstrcat ( sz, TITLE_UNTITLED );

	mcs.szTitle = sz;

	mcs.szClass    = STRUCT::Name;
	mcs.hOwner     = Frame.hInstance;
    mcs.x = mcs.cx = CW_USEDEFAULT;
    mcs.y = mcs.cy = CW_USEDEFAULT;
	mcs.style      = 0;
	mcs.lParam     = (LPARAM) tis;

	// ëÆß§†‚Ï Æ·≠Æ¢≠Æ• Æ™≠Æ ·‚‡„™‚„‡Î
	tis->hWnd = (HANDLE) SendMessage ( Frame.hwndClient, WM_MDICREATE, 0, (LPARAM) & mcs );
	if ( ! tis->hWnd ) {
		tis->Close();
		ErrorMessager  ( Frame.hwndFrame, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTCREATEWIN );
		return IDS_CANTCREATEWIN;
		}

	// ëÆß§†‚Ï Æ™≠Æ †‚‡®°„‚Æ¢ (ListBox)
	tis->hwndAtt = CreateWindow ( "LISTBOX", NULL,
             LBS_HASSTRINGS | LBS_OWNERDRAWFIXED | WS_CHILD | WS_VSCROLL | WS_HSCROLL | WS_BORDER | LBS_NOINTEGRALHEIGHT | LBS_NOTIFY | LBS_WANTKEYBOARDINPUT,
             CW_USEDEFAULT, 0, CW_USEDEFAULT, 0,
             tis->hWnd, IDM_ATT_LISTBOX, Frame.hInstance, NULL );

	// ëÆß§†‚Ï Æ™≠Æ ß≠†Á•≠®© (ListBox)
	tis->hwndVal = CreateWindow( "LISTBOX", NULL,
             LBS_HASSTRINGS | LBS_OWNERDRAWFIXED | WS_CHILD | WS_VSCROLL | WS_HSCROLL | WS_BORDER | LBS_NOINTEGRALHEIGHT | LBS_NOTIFY | LBS_WANTKEYBOARDINPUT,
             CW_USEDEFAULT, 0, CW_USEDEFAULT, 0,
             tis->hWnd, IDM_VAL_LISTBOX, Frame.hInstance, NULL );

	// è‡Æ®ß¢•·‚® Ø‡Æ¢•‡™„ ™Æ‡‡•™‚≠Æ·‚® Æ‚™‡Î‚®Ô ListBox'Æ¢
	if ( ! tis->hwndAtt || ! tis->hwndVal ) {
		SendMessage ( tis->hWnd, WM_CLOSE, 0, 0 );
		ErrorMessager  ( Frame.hwndFrame, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTCREATEWIN );
		return IDS_CANTCREATEWIN;
		}

	// à≠®Ê®†´®ß†Ê®Ô ·Æ·‚ÆÔ≠®Ô
	tis->KBase->SetCurAtt ( -1 );
	tis->KBase->SetCurVal ( -1 );
	tis->KBase->SetAttSort ( SORT_UNSORTED );
	tis->KBase->SetValSort ( SORT_UNSORTED );
	tis->KBase->SetWindow ( tis->hWnd );
	tis->KBase->SetView ( VIEW_STRUCT );

	tis->PrintOn();

	// èÆ§·‚‡Æ®‚Ï ‡†ß¨•‡Î ListBox'Æ¢
	RECT rc;
	GetClientRect ( tis->hWnd, & rc );
	tis->Size ( SIZENORMAL, MAKELONG ( rc.right, rc.bottom ) );

	ShowWindow ( tis->hWnd, SW_SHOWNORMAL );
	ShowWindow ( tis->hwndAtt, SW_SHOWNORMAL );
	ShowWindow ( tis->hwndVal, SW_SHOWNORMAL );

	tis->SetFocus();

	return LKE_SUCCESS;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒø
≥ á†™‡Î‚Ï Æ™≠Æ ·‚‡„™‚„‡Î. è•‡•§ ß†™‡Î‚®•¨ ≠•Æ°ÂÆ§®¨Æ Ø‡Æ¢•‡®‚Ï       ≥ Close ≥
≥ ¨Æ¶≠Æ ´® Ì‚Æ §•´†‚Ï. Ö·´® ß†™‡Î‚Æ, ‚Æ ¢Æß¢‡†È†•‚·Ô TRUE.           ¿ƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL STRUCT::Close ( VOID ) {

	if ( 1 == KBase->KBaseNumber() ) {             // ù‚Æ ØÆ·´•§≠•• Æ™≠Æ ‰†©´†
		if ( ! KBase->isKBaseSaved() ) {     // ® •·´® ·Æ§•‡¶®¨Æ• ≠• ·ÆÂ‡†≠•≠Æ
			// ‚Æ ß†Ø‡Æ·®‚Ï ØÆ´ÏßÆ¢†‚•´Ô Æ ·ÆÂ‡†≠•≠®®/≠•·ÆÂ‡†≠•≠®®/Æ‚¨•≠•
			char szName[20];
			int Answ;
			lstrcpy ( szName, KBase->GetNamePtr() );     // èÆ´„Á®‚Ï ®¨Ô ‰†©´†
			if ( szName[0] == 0 ) lstrcpy ( szName, TITLE_UNTITLED );
			Answ = ErrorMessager  ( Frame.hwndFrame, MB_YESNOCANCEL | MB_APPLMODAL | MB_ICONEXCLAMATION, IDS_CLOSESAVE, szName );
			switch ( Answ ) {
				case IDYES :                         // ëÆÂ‡†≠®‚Ï Åá ® ß†™‡Î‚Ï
					if ( ! Save () ) return FALSE;
					break;
				case IDNO :                          // á†™‡Î‚Ï °•ß ·ÆÂ‡†≠•≠®Ô
					break;
				default   :
					// ã®°Æ ÆË®°™† MessageBox(), ´®°Æ Æ‚™†ß Æ‚ ß†™‡Î‚®Ô
					return FALSE;
				}
			}
		}

	// ó‚Æ°Î ™ Æ™≠„ ≠• Ø‡®ÂÆ§®´Æ ·ÆÆ°È•≠®©, ØÆ·´• „§†´•≠®Ô Æ°Í•™‚†
	DestroyWindow ( hwndAtt );
	DestroyWindow ( hwndVal );

	// á†™‡Î‚Ï Æ°Í•™‚ KBASE
	KBase->CloseKBase();

	return TRUE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒø
≥ ëÆÂ‡†≠®‚Ï ·Æ§•‡¶®¨Æ• Åá. Ö·´® ≠•®¨•≠Æ¢†≠† Åá, ‚Æ ¢Îß¢†‚Ï §®†´Æ£     ≥ Save ≥
≥ SaveAs. Ö·´® Åá ·ÆÂ‡†≠•≠†, ‚Æ ¢•‡≠„‚Ï TRUE.                         ¿ƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL STRUCT::Save ( VOID ) {

	if ( KBase->isKBaseNamed() ) {                          // ë‡†ß„ ·ÆÂ‡†≠®‚Ï
#ifdef EDIPDEMO
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND, IDS_EDIPDEMO );
#else
		if ( LKE_SUCCESS != KBase->SaveKBase() ) {
			ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTSAVE );
			return FALSE;
			}
#endif
		}
	else if ( FileSaveAs() ) {               // ëÆÂ‡†≠®‚Ï ØÆ·´• Ø•‡•®¨•≠Æ¢†≠®Ô
		KBase->RenameKBase ( FullPath );
#ifdef EDIPDEMO
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND, IDS_EDIPDEMO );
#else
		if ( LKE_SUCCESS != KBase->SaveKBase() ) {
			ErrorMessager ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTSAVE );
			return FALSE;
			}
#endif
		}
	else return FALSE;                             // é‚™†ß (Cancel) ¢ §®†´Æ£•

	return TRUE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒø
≥                                                                     ≥ Size ≥
≥                                                                     ¿ƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::Size ( WPARAM wParam, LPARAM lParam ) {

	if ( wParam != SIZENORMAL && wParam != SIZEFULLSCREEN ) return;

	ShowWindow ( hwndAtt, SW_HIDE );
	ShowWindow ( hwndVal, SW_HIDE );

	if ( SplitState == IDM_VIEWHORIZONTAL ) {
		int AttHight = (int) ( HIWORD(lParam) * Part     ) + 1;
		int ValHight = (int) ( HIWORD(lParam) * (1-Part) ) - Frame.BrdWidth + 2;

		MoveWindow ( hwndAtt, -1, -1,                            LOWORD(lParam) + 2, AttHight, 1 );
		MoveWindow ( hwndVal, -1, AttHight + Frame.BrdWidth - 1, LOWORD(lParam) + 2, ValHight, 1 );
		ShowWindow ( hwndAtt, SW_SHOWNOACTIVATE );
		ShowWindow ( hwndVal, SW_SHOWNOACTIVATE );
		}

	else if ( SplitState == IDM_VIEWVERTICAL ) {
		int AttWidth = (int) ( LOWORD(lParam) * Part     ) + 1;
		int ValWidth = (int) ( LOWORD(lParam) * (1-Part) ) - Frame.BrdWidth + 2;

		MoveWindow ( hwndAtt, -1,                            -1, AttWidth, HIWORD(lParam) + 2, 1 );
		MoveWindow ( hwndVal, AttWidth + Frame.BrdWidth - 1, -1, ValWidth, HIWORD(lParam) + 2, 1 );
		ShowWindow ( hwndAtt, SW_SHOWNOACTIVATE );
		ShowWindow ( hwndVal, SW_SHOWNOACTIVATE );
		}
	else {
		MoveWindow ( hwndAtt, -1, -1, LOWORD(lParam) + 2, HIWORD(lParam) + 2, 1 );
		ShowWindow ( hwndAtt, SW_SHOWNOACTIVATE );
		}
	SetFocus ( );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒø
≥                                                                     ≥ View ≥
≥                                                                     ¿ƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::View ( int NewView ) {
	RECT rc;
	GetClientRect ( hWnd, & rc );
	int Prev = SplitState;

	// ì·‚†≠Æ¢®‚Ï ≠Æ¢Î© ¢®§
	if ( ( NewView == IDM_VIEWHORIZONTAL && Prev == IDM_VIEWHORIZONTAL ) ||
         ( NewView == IDM_VIEWVERTICAL   && Prev == IDM_VIEWVERTICAL ) )
		SplitState = IDM_VIEWNONE;
	else
		SplitState = NewView;

	if ( SplitState == IDM_VIEWNONE ) {
		// á†ØÆ´≠®‚Ï Æ™≠† ≠Æ¢Î¨ ·Æ§•‡¶®¨Î¨
		// ¢ Æ§≠ÆÆ™Æ≠≠Æ¨ ‡•¶®¨• · ·ÆÂ‡†≠•≠®•¨ ‚•™„È®Â Ø†‡†¨•‚‡Æ¢
		CurFocus = IDM_ATT_LISTBOX;
		FillNoneView();
		}

	if ( Prev == IDM_VIEWNONE ) {
		// á†ØÆ´≠®‚Ï Æ™≠† ≠Æ¢Î¨ ·Æ§•‡¶®¨Î¨
		// ¢ §¢„Æ™Æ≠≠Î¨ ‡•¶®¨• · ·ÆÂ‡†≠•≠®•¨ ‚•™„È®Â Ø†‡†¨•‚‡Æ¢
        FillAttListBox();
		FillValListBox ( KBase->GetCurAtt() );
		}

	if ( SplitState == IDM_VIEWHORIZONTAL )
		SetClassWord ( hWnd, GCW_HCURSOR, HorCur );
	else
		SetClassWord ( hWnd, GCW_HCURSOR, VerCur );

	if ( Prev == IDM_VIEWNONE ) {
		ShowWindow ( hwndVal, SW_SHOWNOACTIVATE );   // èÆ™†ß†‚Ï Æ™≠Æ ß≠†Á•≠®©
		}
	if ( SplitState == IDM_VIEWNONE ) {
		ShowWindow ( hwndVal, SW_HIDE );                   // ë™‡Î‚Ï Æ§≠Æ Æ™≠Æ
		}

	Size ( SIZENORMAL, MAKELONG ( rc.right, rc.bottom ) );

//	PrintOn ( );
//	CurFocus = IDM_ATT_LISTBOX;
//	SetFocus ( );

	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø
≥                                                                 ≥ PartMove ≥
≥                                                                 ¿ƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::PartMove ( UINT msg, LPARAM lParam ) {
/*
éØ‡•§•´®‚Ï ‚•™„È®© ‡†ß¨•‡ (¢Î·Æ‚† ®´® Ë®‡®≠†) Æ™≠† †‚‡®°„‚Æ¢ ®
ß†ØÆ¨≠®‚Ï •£Æ ¢¨•·‚• ≠†Á†´Ï≠Î¨® ™ÆÆ‡§®≠†‚†¨® ¨ÎË®. è‡® §¢®¶•≠®®
¨ÎË® ÆØ‡•§•´Ô‚Ï ·¨•È•≠®• Æ‚≠Æ·®‚•´Ï≠Æ ≠†Á†´Ï≠Æ© ™ÆÆ‡§®≠†‚Î ®
·ÆÆ‚¢•‚·‚¢•≠≠Æ ®ß¨•≠Ô‚Ï ‡†ß¨•‡ Æ™≠† †‚‡®°„‚Æ¢. èÆ·™Æ´Ï™„ §®†Ø†ßÆ≠
®ß¨•≠•≠®Ô Æ™≠† †‚‡®°„‚Æ¢ ¢·•£§† ®ß¢•·‚•≠ (¨•¶§„ 0 ® ‡†ß¨•‡Æ¨ Ø†ØÎ
°•ß Ë®‡®≠Î °Æ‡§Ó‡†), ‚Æ ≠•Æ°ÂÆ§®¨Æ §•‡¶†‚Ï •£Æ ¢ Ì‚Æ¨ §®†Ø†ßÆ≠•.
è•‡•‡®·Æ¢Î¢†≠®• ØÆ´Æ·Î Ø‡Æ®·ÂÆ§®‚ ®·ÂÆ§Ô ®ß ‚•™„È•£Æ ‡†ß¨•‡† Æ™≠†
†‚‡®°„‚Æ¢. è‡® Æ‚Ø„·™†≠®® ¨ÎË®, ØÆ´• Part ≠†ÂÆ§®‚·Ô ™†™ Æ‚≠ÆË•≠®•
‡†ß¨•‡Æ¢ Æ™≠† †‚‡®°„‚Æ¢ ® Ø†ØÎ.

í†™®¨ Æ°‡†ßÆ¨, Æ·≠Æ¢≠†Ô Ø•‡•¨•≠≠†Ô Ì‚Æ ‚•™„È®© ‡†ß¨•‡ Æ™≠†
†‚‡®°„‚Æ¢, Æ≠† Æ‚‡†¶†•‚ ØÆ´Æ¶•≠®• ØÆ´Æ·Î. Ö• ≠†Á†´Ï≠Æ• ·Æ·‚ÆÔ≠®•
ÆØ‡•§•´Ô•‚·Ô Ø‡® Ø•‡¢Æ¨ ≠†¶†‚®® ¨ÎË® (≠•ß†¢®·®¨Æ Æ‚ ¨•·‚† ≠†¶†‚®Ô
¢≠„‚‡® ØÆ´Æ·Î, Á‚Æ ÂÆ‡ÆËÆ) ®·ÂÆ§Ô ®ß ‚•™„È•£Æ Part ® ‡†ß¨•‡Æ¢
Ø†ØÎ (·¨. ‰„≠™Ê®Ó Size). àß¨•≠•≠®• Ì‚Æ© Ø•‡•¨•≠≠Æ© Ø‡Æ®·ÂÆ§®‚
Ø„‚•¨ §Æ°†¢´•≠®Ô ™ ≠•© ‚•™„È•£Æ ·¨•È•≠®Ô ¨ÎË® Æ‚≠Æ·®‚•´Ï≠Æ
≠†Á†´Ï≠Æ£Æ ØÆ´Æ¶•≠®Ô. é‚·Ó§† ·´•§„•‚, Á‚Æ ¢ ¨Æ¨•≠‚ ≠†¶†‚®Ô ¨ÎË®
≠•Æ°ÂÆ§®¨Æ ß†ØÆ¨≠®‚Ï ™ÆÆ‡§®≠†‚„.
*/

	static BOOL isMove;
	static int AttSizeStart;
	static int AttSize;
	static int StartPos;
	static RECT rc;

	if ( msg == WM_LBUTTONDOWN ) {
		isMove = TRUE;
		SetCapture ( hWnd );
		GetClientRect ( hWnd, & rc );
		if ( SplitState == IDM_VIEWHORIZONTAL ) {
			AttSizeStart = AttSize = (int) ( rc.bottom * Part ) + 1; // ÇÎ·Æ‚†
			StartPos = HIWORD ( lParam );
			DrawPart ( AttSize, IDM_VIEWHORIZONTAL );
			}
		else if ( SplitState == IDM_VIEWVERTICAL ) {
			AttSizeStart = AttSize = (int) ( rc.right * Part ) + 1;  // ò®‡®≠†
			StartPos = LOWORD ( lParam );
			DrawPart ( AttSize, IDM_VIEWVERTICAL );
			}
		}
	else if ( msg == WM_MOUSEMOVE && isMove) {
		// è•‡•‡®·Æ¢†‚Ï ØÆ´Æ·„ •·´® ®ß¨•≠•≠®• ¢ ≠„¶≠Æ¨ ≠†Ø‡†¢´•≠®®
		if ( SplitState == IDM_VIEWHORIZONTAL ) {
			DrawPart ( AttSize, IDM_VIEWHORIZONTAL );
			AttSize = AttSizeStart + HIWORD(lParam) - StartPos;
			if ( AttSize < 1 ) AttSize = 1;
			if ( AttSize > rc.bottom - Frame.BrdWidth + 1 ) AttSize = rc.bottom - Frame.BrdWidth + 1;
			DrawPart ( AttSize, IDM_VIEWHORIZONTAL );
			}
		else if ( SplitState == IDM_VIEWVERTICAL ) {
			DrawPart ( AttSize, IDM_VIEWVERTICAL );
			AttSize = AttSizeStart + LOWORD(lParam) - StartPos;
			if ( AttSize < 1 ) AttSize = 1;
			if ( AttSize > rc.right - Frame.BrdWidth + 1 ) AttSize = rc.right - Frame.BrdWidth + 1;
			DrawPart ( AttSize, IDM_VIEWVERTICAL );
			}
		}
	else if ( msg == WM_LBUTTONUP && isMove ) {
		// ÇÎÁ®·´®‚Ï ≠Æ¢Æ• ß≠†Á•≠®• Part ® ØÆ·´†‚Ï ·ÆÆ°È•≠®• WM_SIZE
		if ( SplitState == IDM_VIEWHORIZONTAL ) {
			Part = (float) (AttSize - 1) / (float) ( rc.bottom );
			DrawPart ( AttSize, IDM_VIEWHORIZONTAL );
			}
		else if ( SplitState == IDM_VIEWVERTICAL ) {
			Part = (float) (AttSize - 1) / (float) ( rc.right );
			DrawPart ( AttSize, IDM_VIEWVERTICAL );
			}
		isMove = FALSE;
		ReleaseCapture ( );
		Size ( SIZENORMAL, MAKELONG ( rc.right, rc.bottom ) );

		}
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø
≥                                                                 ≥ DrawPart ≥
≥                                                                 ¿ƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::DrawPart ( int AttSize, WORD vh ) {
	RECT rc;
	GetClientRect ( hWnd, & rc );

	if ( vh == IDM_VIEWHORIZONTAL ) {
		rc.top = AttSize-1;    rc.bottom = AttSize + Frame.BrdWidth - 1;
		}
	if ( vh == IDM_VIEWVERTICAL ) {
		rc.left = AttSize-1;   rc.right = AttSize + Frame.BrdWidth - 1;
		}

	HDC hdc = GetDC ( hWnd );

	InvertRect ( hdc, & rc );

	ReleaseDC ( hWnd, hdc );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø
≥ ì·‚†≠†¢´®¢†•‚ ‰Æ™„· ¢ ß†¢®·®¨Æ·‚® Æ‚ ‚•™„È•£Æ ·Æ·‚ÆÔ≠®Ô.        ≥ SetFocus ≥
≥                                                                 ¿ƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::SetFocus ( VOID ) {
	if ( ( SplitState == IDM_VIEWNONE ) || ( CurFocus == IDM_ATT_LISTBOX ) )
	     ::SetFocus ( hwndAtt );
	else ::SetFocus ( hwndVal );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥ è‡•¶§• ¢·•£Æ Ì‚† ‰„≠™Ê®Ô ÆÁ®È†•‚ Æ™≠Æ Ø‡®ß≠†™Æ¢. á†‚•¨    ≥ FillAttListBox ≥
≥ Æ≠† ¢Î°®‡†•‚ ¢ ÆØ‡•§•´•≠≠Æ¨ ØÆ‡Ô§™• (ß†¢®·®‚ Æ‚ ‚•™„È•©   ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
≥ ·Æ‡‚®‡Æ¢™®, ™Æ‚Æ‡†Ô §Æ´¶≠† °Î‚Ï „¶• Ø‡Æ¢•§•≠†) Ø‡®ß≠†™® ®ß ‰†©´† ®         ≥
≥ ß†ØÆ´≠Ô•‚ ®¨® Æ™≠Æ (ListBox). èÆ·´•§≠ÔÔ ·‚‡Æ™† ¢ ListBox'• Ø„·‚†Ô ®        ≥
≥ Ø‡•§≠†ß≠†Á•≠† §´Ô §Æ°†¢´•≠®Ô Ø‡®ß≠†™Æ¢ ¢ ™Æ≠•Ê ·Ø®·™†. Ç ™Æ≠Ê• „·‚†≠†-     ≥
≥ ¢´®¢†•‚·Ô ‚•™„È®© ≠Æ¨•‡ †‚‡®°„‚† ® Ø•‡•¢Æ§®‚·Ô ™„‡·Æ‡. èÆ ¨•‡• ß†ØÆ´≠•≠®Ô  ≥
≥ Æ™≠† ·‚‡Æ™†¨®, ØÆ§·Á®‚Î¢†•‚·Ô ®Â ¨†™·®¨†´Ï≠†Ô §´®≠† (¢ Ø®™·•´†Â), ØÆ·´•    ≥
≥ Á•£Æ „·‚†≠†¢´®¢†•‚·Ô Ë®‡®≠† ListBox'†.                                     ≥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::FillAttListBox ( VOID ) {
	int i, w, maxWidth = 0;

//	ShowWindow ( hwndAtt, SW_HIDE );
	SendMessage ( hwndAtt, WM_SETREDRAW, FALSE, 0L );
	SendMessage ( hwndAtt, LB_RESETCONTENT, 0, 0 );        // éÁ®·‚®‚Ï ListBox

	HDC hDC = GetDC ( hwndAtt );              // Ñ´Ô ÆØ‡•§•´•≠®Ô Ë®‡®≠Î ·‚‡Æ™®
	for ( i = 0; i < KBase->AttNumber(); i++ ) {          // ñ®™´ ØÆ †‚‡®°„‚†¨
		ATT_REC  AttRec;

		KBase->GetAttribute ( i, & AttRec );
		// ÇÎÁ®·´®‚Ï Ë®‡®≠„ •£Æ ≠†ß¢†≠®Ô ® ·‡†¢≠®‚Ï · ‚•™„È•© (•·´® °Æ´ÏË•, ‚Æ ·§•´†‚Ï ‚•™„È•©)
		w = LOWORD ( GetTextExtent ( hDC, (LPSTR) & AttRec.Name, lstrlen ( (LPSTR) & AttRec.Name) ) );
		if ( maxWidth < w ) maxWidth = w;

		// á†≠•·‚® †‚‡®°„‚ ¢ ListBox
		SendMessage ( hwndAtt, LB_ADDSTRING, 0, (LPARAM) & AttRec.Name );
		}
	ReleaseDC ( hwndAtt, hDC );

	SendMessage ( hwndAtt, LB_ADDSTRING, 0, (LPARAM)"" );
	SendMessage ( hwndAtt, LB_SETCURSEL, (WPARAM) KBase->GetCurAtt(), 0 );
	SendMessage ( hwndAtt, LB_SETHORIZONTALEXTENT, maxWidth+6+3*BMPWIDTH, 0 );
	SendMessage ( hwndAtt, WM_SETREDRAW, TRUE, 0L );
	InvalidateRect ( hwndAtt, NULL, FALSE );
//	ShowWindow ( hwndAtt, SW_SHOW );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥ á†ØÆ´≠Ô•‚ Æ™≠Æ ß≠†Á•≠®© ·‚‡Æ™†¨®. ç•´ÏßÔ ®·ØÆ´ÏßÆ¢†‚Ï ¢   ≥ FillValListBox ≥
≥ Æ§≠ÆÆ™Æ≠≠Æ¨ ‡•¶®¨•. í•™„È•• ß≠†Á•≠®• §Æ´¶≠Æ °Î‚Ï          ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
≥ Ø‡†¢®´Ï≠Æ „·‚†≠Æ¢´•≠Æ.                                                     ≥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::FillValListBox ( int Att ) {
	VAL_REC  ValRec;
	int j, w, maxWidth = 0;

	if ( Att == -1 || Att == KBase->AttNumber() ) {
		SendMessage ( hwndVal, LB_SETHORIZONTALEXTENT, 0, 0 );
		SendMessage ( hwndVal, LB_RESETCONTENT, 0, 0 );
		return;
		}

//	ShowWindow ( hwndVal, SW_HIDE );
	SendMessage ( hwndVal, WM_SETREDRAW, FALSE, 0L );
	SendMessage ( hwndVal, LB_RESETCONTENT, 0, 0 );        // éÁ®·‚®‚Ï ListBox

	HDC hDC = GetDC ( hwndVal );              // Ñ´Ô ÆØ‡•§•´•≠®Ô Ë®‡®≠Î ·‚‡Æ™®
	for ( j = 0; j < KBase->ValNumber ( Att ); j++ ) {    // ñ®™´ ØÆ ß≠†Á•≠®Ô¨
		// ç†©‚® ß≠†Á•≠®• · ®≠§•™·Æ¨ i ¢ ß†¢®·®¨Æ·‚® Æ‚ ‚•™„È•© ·Æ‡‚®‡Æ¢™®
		KBase->GetValue ( Att, j, & ValRec );

		// ÇÎÁ®·´®‚Ï Ë®‡®≠„ •£Æ ≠†ß¢†≠®Ô ® ·‡†¢≠®‚Ï · ‚•™„È•© (•·´® °Æ´ÏË•, ‚Æ ·§•´†‚Ï ‚•™„È•©)
		w = LOWORD ( GetTextExtent ( hDC, (LPSTR) & ValRec.Name, lstrlen ( (LPSTR) & ValRec.Name) ) );
		if ( maxWidth < w ) maxWidth = w;

		// á†≠•·‚® ß≠†Á•≠®• ¢ ListBox, † ®≠§•™· ß†Ø®·†‚Ï (Æ≠ §Æ´¶•≠ °Î‚Ï ‡†¢•≠ ®·ÂÆ§≠Æ¨„)
		SendMessage ( hwndVal, LB_ADDSTRING, 0, (LPARAM) & ValRec.Name );

		}
	ReleaseDC ( hwndVal, hDC );

	SendMessage ( hwndVal, LB_ADDSTRING, 0, (LPARAM)"" );   // ÑÆ°†¢®‚ Ø„·‚„Ó ·‚‡Æ™„

	SendMessage ( hwndVal, LB_SETCURSEL, KBase->GetCurVal(), 0 );

	SendMessage ( hwndVal, LB_SETHORIZONTALEXTENT, maxWidth+6+3*BMPWIDTH, 0 );
	SendMessage ( hwndVal, WM_SETREDRAW, TRUE, 0L );
	InvalidateRect ( hwndVal, NULL, FALSE );
//	ShowWindow ( hwndVal, SW_SHOW );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥ á†ØÆ´≠Ô•‚ Æ™≠Æ †‚‡®°„‚†¨® ® ß≠†Á•≠®Ô¨®.                     ≥ FillNoneView ≥
≥ í•™„È®• †‚‡®°„‚ ® ß≠†Á•≠®• §Æ´¶≠Î °Î‚Ï Ø‡†¢®´Ï≠Æ „·‚†≠Æ¢´•≠Î¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::FillNoneView ( VOID ) {
	int i, j, w, maxWidth = 0;
	ATT_REC  AttRec;
	VAL_REC  ValRec;

//	ShowWindow ( hwndAtt, SW_HIDE );
	SendMessage ( hwndAtt, WM_SETREDRAW, FALSE, 0L );
	SendMessage ( hwndAtt, LB_RESETCONTENT, 0, 0 );        // éÁ®·‚®‚Ï ListBox

	HDC hDC = GetDC ( hwndAtt );              // Ñ´Ô ÆØ‡•§•´•≠®Ô Ë®‡®≠Î ·‚‡Æ™®
	for ( i = 0; i < KBase->AttNumber(); i++ ) {          // ñ®™´ ØÆ †‚‡®°„‚†¨

		KBase->GetAttribute ( i, & AttRec );
		// ÇÎÁ®·´®‚Ï Ë®‡®≠„ •£Æ ≠†ß¢†≠®Ô ® ·‡†¢≠®‚Ï · ‚•™„È•© (•·´® °Æ´ÏË•, ‚Æ ·§•´†‚Ï ‚•™„È•©)
		w = LOWORD ( GetTextExtent ( hDC, (LPSTR) & AttRec.Name, lstrlen ( (LPSTR) & AttRec.Name) ) );
		if ( maxWidth < w ) maxWidth = w;

		// á†≠•·‚® †‚‡®°„‚ ¢ ListBox
		SendMessage ( hwndAtt, LB_ADDSTRING, 0, (LPARAM) & AttRec.Name );

		for ( j = 0; j < KBase->ValNumber ( i ); j++ ) {  // ñ®™´ ØÆ ß≠†Á•≠®Ô¨

			KBase->GetValue ( i, j, & ValRec );
			// ÇÎÁ®·´®‚Ï Ë®‡®≠„ •£Æ ≠†ß¢†≠®Ô ® ·‡†¢≠®‚Ï · ‚•™„È•© (•·´® °Æ´ÏË•, ‚Æ ·§•´†‚Ï ‚•™„È•©)
			w = LOWORD ( GetTextExtent ( hDC, (LPSTR) & ValRec.Name, lstrlen ( (LPSTR) & ValRec.Name) ) );
			if ( maxWidth < w ) maxWidth = w;

			// á†≠•·‚® ß≠†Á•≠®• ¢ ListBox
			SendMessage ( hwndAtt, LB_ADDSTRING, 0, (LPARAM) & ValRec.Name );
			}
		SendMessage ( hwndAtt, LB_ADDSTRING, 0, (LPARAM)"" );

		}
	ReleaseDC ( hwndAtt, hDC );

	SendMessage ( hwndAtt, LB_ADDSTRING, 0, (LPARAM)"" );
	SendMessage ( hwndAtt, LB_SETCURSEL, (WPARAM) MakeNoneIdx ( KBase->GetCurAtt(), KBase->GetCurVal() ), 0 );
	SendMessage ( hwndAtt, LB_SETHORIZONTALEXTENT, maxWidth+6+5*BMPWIDTH, 0 );
	SendMessage ( hwndAtt, WM_SETREDRAW, TRUE, 0L );
	InvalidateRect ( hwndAtt, NULL, FALSE );
//	ShowWindow ( hwndAtt, SW_SHOW );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒø
≥ ÇÎ¢Æ§®‚ ·Æ§•‡¶®¨Æ• Æ°Í•™‚† ¢ Æ™≠Æ                                ≥ PrintOn ≥
≥                                                                  ¿ƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::PrintOn ( VOID ) {
	if ( SplitState == IDM_VIEWNONE ) FillNoneView();
	else {
		FillAttListBox();
		FillValListBox ( KBase->GetCurAtt() );
		}
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥ éØ‡•§•´®‚Ï ØÆ´Æ¶•≠®• ¢ §•‡•¢• ØÆ †‚‡®°„‚„ ® ß≠†Á•≠®Ó         ≥ MakeNoneIdx ≥
≥                                                              ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
int STRUCT::MakeNoneIdx ( int Att, int Val ) {
	if ( Att == -1 ) return -1;
	// Ñ¢Æ©™†≥ ØÆ‚Æ¨„, Á‚Æ „ ™†¶§Æ£Æ †‚‡®°„‚† ØÆ Æ§≠Æ¨„ ¢·ØÆ¨Æ£†‚•´Ï≠Æ¨„ ß≠†Á•≠®Ó
	//       ≥             é§®≠ ¢·ØÆ¨Æ£†‚•´Ï≠Î© †‚‡®°„‚ ≥
	//       V                                          V
	return ( 2 * Att + KBase->ValPosSum ( Att ) + Val + 1 );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥ éØ‡•§•´®‚Ï ≠Æ¨•‡ †‚‡®°„‚† ØÆ ØÆ´Æ¶•≠®Ó ¢ §•‡•¢•              ≥ NoneIdx2Att ≥
≥                                                              ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
int STRUCT::NoneIdx2Att ( int Idx ) {
	if ( Idx == -1 ) return -1;

	int i, n = KBase->AttNumber();
	for ( i = 1; i <= n; i++ ) if ( MakeNoneIdx ( i, -1 ) > Idx ) break;

	return i-1;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥ éØ‡•§•´®‚Ï ≠Æ¨•‡ ß≠†Á•≠®Ô ØÆ ØÆ´Æ¶•≠®Ó ¢ §•‡•¢•              ≥ NoneIdx2Val ≥
≥                                                              ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
int STRUCT::NoneIdx2Val ( int Idx ) {
	if ( Idx == -1 ) return -1;

	return ( Idx - 1 - MakeNoneIdx ( NoneIdx2Att ( Idx ), -1 ) );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                          ≥ InsertAttribute ≥
≥                                                          ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::InsertAttribute ( VOID ) {
	ATT_REC AttRec = { "", "", "", 0 ,0 ,0 ,0 };

	if ( KBase->GetCurAtt() == -1 ) return;

	// ÇÎß¢†‚Ï §®†´Æ£Æ¢ÆÓ Ø‡ÆÊ•§„‡„ ® Ø•‡•§†‚Ï •© „™†ß†‚•´Ï ≠† ATT_REC
	FARPROC lpAttProc = MakeProcInstance ( (FARPROC) AttributeProc, Frame.hInstance );
	int i = DialogBoxParam ( Frame.hInstance, "attribute", Frame.hwndFrame, lpAttProc, (LPARAM) & AttRec );
	FreeProcInstance ( lpAttProc );
	if ( ! i ) return;                                  // Ñ®†´Æ£ ≠• ·Æ·‚ÆÔ´·Ô

	// è‡Æ®ß¢•·‚® §Æ°†¢´•≠®• †‚‚‡®°„‚†.
	int Ret = KBase->InsAttribute ( & AttRec );

	if ( Ret == LKE_NOTUNIQUE ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_NOTUNIQUE );
		return;
		}
	if ( Ret == LKE_ALLOCMEM ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTALLOC );
		return;
		}

	PrintOn();

	return;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                              ≥ InsertValue ≥
≥                                                              ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::InsertValue ( VOID ) {
	VAL_REC ValRec = { "", "", "", 0 ,0 ,0 ,0 };


	if ( ( KBase->GetCurVal() == -1 ) || ( KBase->GetCurAtt() == -1 ) ||
         ( KBase->GetCurAtt() == KBase->AttNumber() ) )
		return;

	// ÇÎß¢†‚Ï §®†´Æ£Æ¢ÆÓ Ø‡ÆÊ•§„‡„ ® Ø•‡•§†‚Ï •© „™†ß†‚•´Ï ≠† VAL_REC
	FARPROC lpValProc = MakeProcInstance ( (FARPROC) ValueProc, Frame.hInstance );
	int i = DialogBoxParam ( Frame.hInstance, "value", Frame.hwndFrame, lpValProc, (LPARAM) & ValRec );
	FreeProcInstance ( lpValProc );
	if ( ! i ) return;                                  // Ñ®†´Æ£ ≠• ·Æ·‚ÆÔ´·Ô

	// è‡Æ®ß¢•·‚® §Æ°†¢´•≠®• †‚‚‡®°„‚†.
	int Ret = KBase->InsValue ( & ValRec );

	if ( Ret == LKE_NOTUNIQUE ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_NOTUNIQUE );
		return;
		}
	if ( Ret == LKE_ALLOCMEM ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTALLOC );
		return;
		}

	PrintOn();

	return;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                            ≥ EditAttribute ≥
≥                                                            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::EditAttribute ( VOID ) {
	ATT_REC AttRec;

	if ( ( KBase->GetCurAtt() == -1 ) || ( KBase->GetCurAtt() == KBase->AttNumber() ) )
		return;

	// á†·„≠„‚Ï ‚•™„È®© †‚‡®°„‚ ¢ AttRec
	KBase->GetAttribute ( KBase->GetCurAtt(), & AttRec );

	// ÇÎß¢†‚Ï §®†´Æ£Æ¢ÆÓ Ø‡ÆÊ•§„‡„ ® Ø•‡•§†‚Ï •© „™†ß†‚•´Ï ≠† ATT_REC
	FARPROC lpAttProc = MakeProcInstance ( (FARPROC) AttributeProc, Frame.hInstance );
	int i = DialogBoxParam ( Frame.hInstance, "attribute", Frame.hwndFrame, lpAttProc, (LPARAM) & AttRec );
	FreeProcInstance ( lpAttProc );
	if ( ! i ) return;                                  // Ñ®†´Æ£ ≠• ·Æ·‚ÆÔ´·Ô

	// è‡Æ®ß¢•·‚® §Æ°†¢´•≠®• ß≠†Á•≠®Ô.
	int Ret = KBase->PutAttribute ( & AttRec );

	if ( Ret == LKE_NOTUNIQUE ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_NOTUNIQUE );
		return;
		}
	if ( Ret == LKE_ALLOCMEM ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTALLOC );
		return;
		}

	// á†ØÆ´≠®‚Ï ListBox'Î
	PrintOn();

	return;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒø
≥                                                                ≥ EditValue ≥
≥                                                                ¿ƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::EditValue ( VOID ) {
	VAL_REC ValRec;

	if ( ( KBase->GetCurVal() == -1 ) || ( KBase->GetCurAtt() == -1 ) ||
         ( KBase->GetCurAtt() == KBase->AttNumber() ) ||
         ( KBase->GetCurVal() == KBase->ValNumber ( KBase->GetCurAtt() ) ) )
		return;

	// á†·„≠„‚Ï ‚•™„È•• ß≠†Á•≠®• ¢ ValRec
	KBase->GetValue ( KBase->GetCurAtt(), KBase->GetCurVal(), & ValRec );

	// ÇÎß¢†‚Ï §®†´Æ£Æ¢ÆÓ Ø‡ÆÊ•§„‡„ ® Ø•‡•§†‚Ï •© „™†ß†‚•´Ï ≠† VAL_REC
	FARPROC lpValProc = MakeProcInstance ( (FARPROC) ValueProc, Frame.hInstance );
	int i = DialogBoxParam ( Frame.hInstance, "value", Frame.hwndFrame, lpValProc, (LPARAM) & ValRec );
	FreeProcInstance ( lpValProc );
	if ( ! i ) return;                                  // Ñ®†´Æ£ ≠• ·Æ·‚ÆÔ´·Ô

	// è‡Æ®ß¢•·‚® §Æ°†¢´•≠®• ß≠†Á•≠®Ô.
	int Ret = KBase->PutValue ( & ValRec );

	if ( Ret == LKE_NOTUNIQUE ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_NOTUNIQUE );
		return;
		}
	if ( Ret == LKE_ALLOCMEM ) {
		ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTALLOC );
		return;
		}

	// á†ØÆ´≠®‚Ï ListBox'Î
	PrintOn();

	return;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                          ≥ DeleteAttribute ≥
≥                                                          ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::DeleteAttribute ( VOID ) {

	if ( ( KBase->GetCurAtt() == -1) || ( KBase->GetCurAtt() == KBase->AttNumber() ) )
		return;

	if ( IDYES != ErrorMessager  ( hWnd, MB_YESNO | MB_APPLMODAL | MB_ICONEXCLAMATION, IDS_DELETEATTRIBUTE ) )
		return;

	// ì§†´®‚Ï †‚‡®°„‚
	KBase->DelAttribute();

	// é‚‡†ß®‚Ï ‚•™„È•• ·Æ·‚ÆÔ≠®• ≠† Ì™‡†≠•
	PrintOn();

	return;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                              ≥ DeleteValue ≥
≥                                                              ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::DeleteValue ( VOID ) {

	if ( ( KBase->GetCurVal() == -1) ||
         ( KBase->GetCurVal() == KBase->ValNumber ( KBase->GetCurAtt() ) ) ||
         ( KBase->GetCurAtt() == -1 ) ||
         ( KBase->GetCurAtt() == KBase->AttNumber() ) )
		return;

	if ( IDYES != ErrorMessager ( hWnd, MB_YESNO | MB_APPLMODAL | MB_ICONEXCLAMATION, IDS_DELETEVALUE ) )
		return;

	// ì§†´®‚Ï ß≠†Á•≠®• ®ß ‰†©´†
	KBase->DelValue();

	// é‚‡†ß®‚Ï ‚•™„È•• ·Æ·‚ÆÔ≠®• LISTBOX'Æ¢ ≠† Ì™‡†≠•
	PrintOn();

	return;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø
≥                                                                 ≥ InitMenu ≥
≥                                                                 ¿ƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::InitMenu ( VOID ) {

	// é‚¨•‚®‚Ï ·Æ·‚ÆÔ≠®• LISTBOX'Æ¢
	if ( SplitState == IDM_VIEWVERTICAL ) {
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VIEWVERTICAL, MF_CHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VIEWHORIZONTAL, MF_UNCHECKED );
		}
	else if ( SplitState == IDM_VIEWHORIZONTAL ) {
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VIEWVERTICAL, MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VIEWHORIZONTAL, MF_CHECKED );
		}
	else if ( SplitState == IDM_VIEWNONE ) {
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VIEWVERTICAL, MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VIEWHORIZONTAL, MF_UNCHECKED );
		}

	if ( isAttSelected() ) {

		// á†Ø‡‚•®‚Ï Ø„≠™‚Î ¨•≠Ó ≠• Æ‚≠Æ·ÔÈ®•·Ô ™ Ì‚Æ¨„ Æ™≠„
		EnableMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES, MF_ENABLED );
		EnableMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_CHARACTER, MF_GRAYED );

		// é‚¨•‚®‚Ï ‚•™„È„Ó ·Æ‡‚®‡Æ¢™„
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_UNSORTED,   MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_NAME,       MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_PRICE,      MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_IMPORTANCE, MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES,     MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_CHARACTER,  MF_UNCHECKED );

		switch ( KBase->GetAttSort() ) {
			case - SORT_UNSORTED :
			case SORT_UNSORTED   : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_UNSORTED,   MF_CHECKED );
				break;
				}
			case - SORT_ALPHA    :
			case SORT_ALPHA      : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_NAME,       MF_CHECKED );
				break;
				}
			case - SORT_VALNUM   :
			case SORT_VALNUM     : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES,     MF_CHECKED );
				break;
				}
			case - SORT_PRICE    :
			case SORT_PRICE      : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_PRICE,      MF_CHECKED );
				break;
				}
			case - SORT_IMPORTANCE:
			case SORT_IMPORTANCE  : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_IMPORTANCE, MF_CHECKED );
				break;
				}
/*			case - SORT_CHARACTER:
			case SORT_CHARACTER  : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_CHARACTER,  MF_CHECKED );
				break;
				}
*/			}

	   	 // é‚¨•‚®‚Ï Ø‡®·„‚·‚¢®• Æ°‡†‚≠Æ© ·Æ‡‚®‡Æ¢™®
		if ( KBase->GetAttSort() < 0 )
			CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_REVERSE, MF_CHECKED );
		else
			CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_REVERSE, MF_UNCHECKED );

		}
	else {

		// Ñ´Ô Æ™≠† ß≠†Á•≠®©
		// á†Ø‡‚•®‚Ï Ø„≠™‚Î ¨•≠Ó ≠• Æ‚≠Æ·ÔÈ®•·Ô ™ Ì‚Æ¨„ Æ™≠„
		EnableMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES, MF_DISABLED );
		EnableMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES, MF_GRAYED );
		EnableMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_CHARACTER, MF_ENABLED );

		// é‚¨•‚®‚Ï ‚•™„È„Ó ·Æ‡‚®‡Æ¢™„
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_UNSORTED,   MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_NAME,       MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_PRICE,      MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_IMPORTANCE, MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES,     MF_UNCHECKED );
		CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_CHARACTER,  MF_UNCHECKED );

		switch ( KBase->GetValSort() ) {
			case - SORT_UNSORTED :
			case SORT_UNSORTED   : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_UNSORTED,   MF_CHECKED );
				break;
				}
			case - SORT_ALPHA    :
			case SORT_ALPHA      : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_NAME,       MF_CHECKED );
				break;
				}
/*			case - SORT_VALNUM   :
			case SORT_VALNUM     : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_VALUES,     MF_CHECKED );
				break;
				}
*/			case - SORT_PRICE    :
			case SORT_PRICE      : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_PRICE,      MF_CHECKED );
				break;
				}
			case - SORT_IMPORTANCE :
			case SORT_IMPORTANCE   : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_IMPORTANCE, MF_CHECKED );
				break;
				}
			case - SORT_CHARACTER :
			case SORT_CHARACTER   : {
				CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_CHARACTER,  MF_CHECKED );
				break;
				}
			}

	   	 // é‚¨•‚®‚Ï Ø‡®·„‚·‚¢®• Æ°‡†‚≠Æ© ·Æ‡‚®‡Æ¢™®
		if ( KBase->GetValSort() < 0 ) CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_REVERSE, MF_CHECKED );
		else CheckMenuItem ( GetSubMenu ( hMenu, 1 ), IDM_REVERSE, MF_UNCHECKED );

		}

	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                              ≥ DrawItemBmp ≥
≥                                                              ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::DrawItemBmp ( LPDRAWITEMSTRUCT lpDIS, int WhatToDraw, BOOL Last ) {

	HPEN SavePen = SelectObject ( lpDIS->hDC, CreatePen ( PS_SOLID, 1, RGB(0,0,255) ) );
	HDC hdcCompat = CreateCompatibleDC ( lpDIS->hDC );
	if ( WhatToDraw == IDM_ATT_LISTBOX ) SelectObject ( hdcCompat, hbmpAtt );
	else                                 SelectObject ( hdcCompat, hbmpVal );

	if ( SplitState != IDM_VIEWNONE )                      // Ñ¢„Æ™Æ≠≠Î© ‡•¶®¨
		if ( Last) {
			MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top);
			LineTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
			LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
			BitBlt ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 - 5 , 10, 10, hdcCompat, 0, 0, SRCCOPY );
        	}
        else {
			MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top);
			LineTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + Frame.LBitemHight );
			MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2);
			LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
			BitBlt ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 - 5, 10, 10, hdcCompat, 0, 0, SRCCOPY );
        	}
	else                                                  // é§≠ÆÆ™Æ≠≠Î© ‡•¶®¨
		if ( WhatToDraw == IDM_ATT_LISTBOX )                 // ê®·„•¨ †‚‡®°„‚
			if ( Last ) {
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 3 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
				BitBlt ( lpDIS->hDC, lpDIS->rcItem.left + 3 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 - 5 , 10, 10, hdcCompat, 0, 0, SRCCOPY );
   		 		}
			else {
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + Frame.LBitemHight );
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 3 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + Frame.LBitemHight );
				BitBlt ( lpDIS->hDC, lpDIS->rcItem.left + 3 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 - 5, 10, 10, hdcCompat, 0, 0, SRCCOPY );
       		 	}
		else                                                // ê®·„•¨ ß≠†Á•≠®•
			if ( Last ) {
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + Frame.LBitemHight );
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top );
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 4 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
				BitBlt ( lpDIS->hDC, lpDIS->rcItem.left + 4 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 - 5 , 10, 10, hdcCompat, 0, 0, SRCCOPY );
   		 		}
			else {
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + BMPWIDTH, lpDIS->rcItem.top + Frame.LBitemHight );
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top );
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + Frame.LBitemHight );
				MoveTo ( lpDIS->hDC, lpDIS->rcItem.left + 2 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2);
				LineTo ( lpDIS->hDC, lpDIS->rcItem.left + 4 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 );
				BitBlt ( lpDIS->hDC, lpDIS->rcItem.left + 4 * BMPWIDTH, lpDIS->rcItem.top + (int) Frame.LBitemHight/2 - 5, 10, 10, hdcCompat, 0, 0, SRCCOPY );
       		 	}

	DeleteObject ( SelectObject ( lpDIS->hDC, SavePen ) );
	DeleteDC ( hdcCompat );

	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                             ≥ DrawItemText ≥
≥                                                             ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::DrawItemText ( LPDRAWITEMSTRUCT lpDIS, int Pos ) {
	char buf[128];
	RECT rc = lpDIS->rcItem;
	HBRUSH hBrush;

	if ( lpDIS->itemState & ODS_SELECTED ) {
		hBrush = CreateSolidBrush ( GetSysColor ( COLOR_HIGHLIGHT ) );
		SetBkColor ( lpDIS->hDC, GetSysColor ( COLOR_HIGHLIGHT ) );
		SetTextColor ( lpDIS->hDC, GetSysColor ( COLOR_HIGHLIGHTTEXT ) );
		}
	else {
		hBrush = CreateSolidBrush ( GetSysColor ( COLOR_WINDOW ) );
		SetBkColor ( lpDIS->hDC, GetSysColor ( COLOR_WINDOW ) );
		SetTextColor ( lpDIS->hDC, GetSysColor ( COLOR_WINDOWTEXT ) );
		}

	// èÆ§£Æ‚Æ¢®‚Ï Æ°´†·‚Ï §´Ô ‡®·Æ¢†≠®Ô, ‚.•., ß†™‡†·®‚Ï •• ≠„¶≠Î¨ Ê¢•‚Æ¨ ¢ ß†¢®·®¨Æ·‚® Æ‚ ¢Î§•´•≠®Ô
	rc.left += Pos;
	FillRect ( lpDIS->hDC, & rc, hBrush );

	TextOut (
		lpDIS->hDC,
		rc.left + 3,                          // é‚·‚„Ø ·´•¢† ≠† ¢·Ô™®© ·´„Á†©
		rc.top + 1,                                           // é‚·‚„Ø ·Ø‡†¢†
		buf,
		(int) SendMessage ( lpDIS->hwndItem, LB_GETTEXT, lpDIS->itemID, (LPARAM) buf )
		);

	DeleteObject ( hBrush );
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒø
≥                                                                 ≥ DrawItem ≥
≥                                                                 ¿ƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::DrawItem ( LPDRAWITEMSTRUCT lpDIS ) {

	if ( SplitState != IDM_VIEWNONE ) {
		RECT rc = lpDIS->rcItem;

		rc.left += 3 * BMPWIDTH;

		switch ( lpDIS->itemAction ) {

		case ODA_SELECT :
			// ÇÎØÆ´≠Ô•¨ ØÆ´≠„Ó Ø‡Æ£‡†¨¨„. ù‚Æ ≠•¨≠Æ£Æ ≠•Ì‰‰•™‚®¢≠Æ (°®‚¨ÌØÎ
			// ‡®·Æ¢†‚Ï ¢ §•©·‚¢®‚•´Ï≠Æ·‚® ≠• ≠†§Æ, † ‚Æ´Ï™Æ ‚•™·‚), ≠Æ ß†‚Æ Ø‡Æ·‚Æ.

			// è‡®·‚•£≠®‚• ‡•¨≠® ® §ÎË®‚• £´„°¶•; Ø‡Æ¢†´®¢†•¨·Ô ¢ ·´•§„ÓÈ®© ™•©·...

		case ODA_DRAWENTIRE : {                  // ç†‡®·Æ¢†‚Ï ØÆ´≠Æ·‚ÏÓ Ø„≠™‚

			if ( lpDIS->CtlID == IDM_ATT_LISTBOX ) {// ê®·„•¨ ¢ Æ™≠• †‚‡®°„‚Æ¢

				if ( lpDIS->itemID == KBase->AttNumber() )   // è„·‚Æ© †‚‡®°„‚
					DrawItemBmp ( lpDIS, lpDIS->CtlID, TRUE );
				else                                     // çÆ‡¨†´Ï≠Î© †‚‡®°„‚
					DrawItemBmp ( lpDIS, lpDIS->CtlID, FALSE );

				DrawItemText ( lpDIS, 3 * BMPWIDTH );
				}
	        else {                                   // ê®·„•¨ ¢ Æ™≠• ß≠†Á•≠®©

				if ( lpDIS->itemID == KBase->ValNumber ( KBase->GetCurAtt() ) )
					DrawItemBmp ( lpDIS, lpDIS->CtlID, TRUE );      // è„·‚Æ• ß≠†Á•≠®•
				else
					DrawItemBmp ( lpDIS,  lpDIS->CtlID, FALSE );// çÆ‡¨†´Ï≠Æ• ß≠†Á•≠®•

				DrawItemText ( lpDIS, 3 * BMPWIDTH );
				}
			break;
			}                                           // case ODA_DRAWENTIRE

		case ODA_FOCUS : {
			// èÆ·‚†¢®‚Ï ‰Æ™„·
			DrawFocusRect ( lpDIS->hDC, & rc );
			break;
			}
		}                                      // switch ( lpDIS->itemAction )

        }                                 // if ( SplitState != IDM_VIEWNONE )

	else {                                              // ê®·„•¨ Ø‡® NONEVIEW
		RECT rc = lpDIS->rcItem;

		if ( NoneIdx2Val ( lpDIS->itemID ) == -1 )  rc.left += 4 * BMPWIDTH;
		else                                        rc.left += 5 * BMPWIDTH;

		switch ( lpDIS->itemAction ) {

		case ODA_SELECT :
			// ÇÎØÆ´≠Ô•¨ ØÆ´≠„Ó Ø‡Æ£‡†¨¨„. ù‚Æ ≠•¨≠Æ£Æ ≠•Ì‰‰•™‚®¢≠Æ (°®‚¨ÌØÎ
			// ‡®·Æ¢†‚Ï ¢ §•©·‚¢®‚•´Ï≠Æ·‚® ≠• ≠†§Æ, † ‚Æ´Ï™Æ ‚•™·‚), ≠Æ ß†‚Æ Ø‡Æ·‚Æ.

			// è‡®·‚•£≠®‚• ‡•¨≠® ® §ÎË®‚• £´„°¶•; Ø‡Æ¢†´®¢†•¨·Ô ¢ ·´•§„ÓÈ®© ™•©·...

		case ODA_DRAWENTIRE : {                  // ç†‡®·Æ¢†‚Ï ØÆ´≠Æ·‚ÏÓ Ø„≠™‚

			if ( NoneIdx2Val ( lpDIS->itemID ) == -1 ) {     // ê®·„•¨ †‚‡®°„‚

				if ( NoneIdx2Att ( lpDIS->itemID ) == KBase->AttNumber() ) // è„·‚Æ© †‚‡®°„‚
					DrawItemBmp ( lpDIS, IDM_ATT_LISTBOX, TRUE );
				else                                     // çÆ‡¨†´Ï≠Î© †‚‡®°„‚
					DrawItemBmp ( lpDIS, IDM_ATT_LISTBOX, FALSE );

				DrawItemText ( lpDIS, 4 * BMPWIDTH );
				}
			else {                                          // ê®·„•¨ ß≠†Á•≠®•

				if ( NoneIdx2Val ( lpDIS->itemID ) == KBase->ValNumber ( NoneIdx2Att ( lpDIS->itemID ) ) )
					DrawItemBmp ( lpDIS, IDM_VAL_LISTBOX, TRUE ); // è„·‚Æ• ß≠†Á•≠®•
				else
					DrawItemBmp ( lpDIS, IDM_VAL_LISTBOX, FALSE ); // çÆ‡¨†´Ï≠Æ• ß≠†Á•≠®•

				DrawItemText ( lpDIS, 5 * BMPWIDTH );
				}
			break;
			}

		case ODA_FOCUS : {
			// èÆ·‚†¢®‚Ï ‰Æ™„·
			DrawFocusRect ( lpDIS->hDC, & rc );
			break;
			}
		}                                      // switch ( lpDIS->itemAction )
		}

	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒø
≥                                                                ≥ ChangeWin ≥
≥                                                                ¿ƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
VOID STRUCT::ChangeWin ( VOID ) {
	if ( SplitState != IDM_VIEWNONE ) {
        if ( CurFocus == IDM_ATT_LISTBOX ) CurFocus = IDM_VAL_LISTBOX;
        else CurFocus = IDM_ATT_LISTBOX;
    	SetFocus ( );
    	}
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                            ≥ isAttSelected ≥
≥                                                            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL STRUCT::isAttSelected ( VOID ) {
	if ( ( ( SplitState != IDM_VIEWNONE ) && ( CurFocus == IDM_ATT_LISTBOX ) ) ||
           ( SplitState == IDM_VIEWNONE ) && ( KBase->GetCurVal() == -1 ) )
		return TRUE;
	else
		return FALSE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                            ≥ isValSelected ≥
≥                                                            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL STRUCT::isValSelected ( VOID ) {
	if ( ( ( SplitState != IDM_VIEWNONE ) && ( CurFocus == IDM_VAL_LISTBOX ) ) ||
           ( SplitState == IDM_VIEWNONE ) && ( KBase->GetCurVal() != -1 ) )
		return TRUE;
	else
		return FALSE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒø
≥                                                                ≥ ValueProc ≥
≥                                                                ¿ƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL FAR PASCAL _export ValueProc ( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam ) {
	static LPVAL_REC ValRec;

    switch ( msg ) {
		case WM_INITDIALOG : {
			char buf[16];

			ValRec = (LPVAL_REC) lParam;

			SendDlgItemMessage ( hwnd, IDD_NAME, WM_SETTEXT, 0, (LPARAM) ValRec->Name );
			SendDlgItemMessage ( hwnd, IDD_NAME, EM_LIMITTEXT, sizeof(ValRec->Name) - 1, 0L );

			SendDlgItemMessage ( hwnd, IDD_QUESTION, WM_SETTEXT, 0, (LPARAM) ValRec->Question );
			SendDlgItemMessage ( hwnd, IDD_QUESTION, EM_LIMITTEXT, sizeof(ValRec->Question) - 1, 0L );

			SendDlgItemMessage ( hwnd, IDD_COMMENT, WM_SETTEXT, 0, (LPARAM) ValRec->Comment );
			SendDlgItemMessage ( hwnd, IDD_COMMENT, EM_LIMITTEXT, sizeof(ValRec->Comment) - 1, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï Ê•≠„ ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			itoa ( (int) ValRec->Price, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_PRICE, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage ( hwnd, IDD_PRICE, EM_LIMITTEXT, 3, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï ¢†¶≠Æ·‚Ï ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			itoa( (int) ValRec->Importance, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_IMPORTANCE, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage ( hwnd, IDD_IMPORTANCE, EM_LIMITTEXT, 3, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï Â†‡†™‚•‡≠Æ·‚Ï ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			itoa( (int) ValRec->Character, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_CHARACTER, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage ( hwnd, IDD_CHARACTER, EM_LIMITTEXT, 3, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï ®≠§•™· £®Ø•‡‚•™·‚† ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			ltoa ( (long) ValRec->HyperIndex, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_HYPERINDEX, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage ( hwnd, IDD_HYPERINDEX, EM_LIMITTEXT, 5, 0L );

			LocalUnlock ( LOWORD(lParam) );
			break;
			}
		case WM_COMMAND : {
			switch( wParam ) {
				case IDOK : {
					char buf[16];

					SendDlgItemMessage ( hwnd, IDD_NAME, WM_GETTEXT, sizeof(ValRec->Name), (LPARAM) ValRec->Name );
					SendDlgItemMessage ( hwnd, IDD_QUESTION, WM_GETTEXT, sizeof(ValRec->Question), (LPARAM) ValRec->Question );
					SendDlgItemMessage ( hwnd, IDD_COMMENT, WM_GETTEXT, sizeof(ValRec->Comment), (LPARAM) ValRec->Comment );

					// èÆ´„Á®‚Ï Ê•≠„ ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_PRICE, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					ValRec->Price = (char) atoi ( buf );

					// èÆ´„Á®‚Ï ¢†¶≠Æ·‚Ï ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_IMPORTANCE, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					ValRec->Importance = (char) atoi ( buf );

					// èÆ´„Á®‚Ï Â†‡†™‚•‡≠Æ·‚Ï ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_CHARACTER, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					ValRec->Character = (char) atoi ( buf );

					// èÆ´„Á®‚Ï ®≠§•™· £®Ø•‡‚•™·‚† ß≠†Á•≠®Ô (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_HYPERINDEX, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					ValRec->HyperIndex = (DWORD) atol ( buf );

					EndDialog ( hwnd, 1 );
					break;
					}
				case IDCANCEL : {
					EndDialog ( hwnd, 0 );
					break;
					}
				default:
					return FALSE;
				}
		    break;
			}
		default :
			return FALSE ;
		}
	return TRUE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                            ≥ AttributeProc ≥
≥                                                            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
BOOL FAR PASCAL _export AttributeProc ( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam ) {
	static LPATT_REC AttRec;

    switch ( msg ) {
		case WM_INITDIALOG : {
			char buf[16];

			AttRec = (LPATT_REC) lParam;

			SendDlgItemMessage ( hwnd, IDD_NAME, WM_SETTEXT, 0, (LPARAM) AttRec->Name );
			SendDlgItemMessage ( hwnd, IDD_NAME, EM_LIMITTEXT, sizeof(AttRec->Name) - 1, 0L );

			SendDlgItemMessage ( hwnd, IDD_QUESTION, WM_SETTEXT, 0, (LPARAM) AttRec->Question );
			SendDlgItemMessage ( hwnd, IDD_QUESTION, EM_LIMITTEXT, sizeof(AttRec->Question) - 1, 0L );

			SendDlgItemMessage ( hwnd, IDD_COMMENT, WM_SETTEXT, 0, (LPARAM) AttRec->Comment );
			SendDlgItemMessage ( hwnd, IDD_COMMENT, EM_LIMITTEXT, sizeof(AttRec->Comment) - 1, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï Ê•≠„ Ø‡®ß≠†™† (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			itoa ( (int) AttRec->Price, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_PRICE, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage (  hwnd, IDD_PRICE, EM_LIMITTEXT, 3, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï ¢†¶≠Æ·‚Ï Ø‡®ß≠†™† (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			itoa ( (int) AttRec->Importance, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_IMPORTANCE, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage ( hwnd, IDD_IMPORTANCE, EM_LIMITTEXT, 3, 0L );

			// à≠®Ê®†´®ß®‡Æ¢†‚Ï ®≠§•™· £®Ø•‡‚•™·‚† (Ø‡•Æ°‡†ßÆ¢†‚Ï ¢ ·‚‡Æ™„)
			ltoa ( (long) AttRec->HyperIndex, buf, 10 );
			SendDlgItemMessage ( hwnd, IDD_HYPERINDEX, WM_SETTEXT, 0, (LPARAM) buf );
			SendDlgItemMessage ( hwnd, IDD_HYPERINDEX, EM_LIMITTEXT, 5, 0L );

			SendDlgItemMessage ( hwnd, IDD_HIDDEN, BM_SETCHECK, (AttRec->Style & AVS_HIDDEN) ? 1 : 0, 0L );
			SendDlgItemMessage ( hwnd, IDD_GLOBAL, BM_SETCHECK, (AttRec->Style & AVS_GLOBAL) ? 1 : 0, 0L );

			break;
			}
		case WM_COMMAND : {
			switch( wParam ) {
				case IDOK : {
					char buf[16];

					SendDlgItemMessage ( hwnd, IDD_NAME, WM_GETTEXT, sizeof(AttRec->Name), (LPARAM) AttRec->Name );
					SendDlgItemMessage ( hwnd, IDD_QUESTION, WM_GETTEXT, sizeof(AttRec->Question), (LPARAM) AttRec->Question );
					SendDlgItemMessage ( hwnd, IDD_COMMENT, WM_GETTEXT, sizeof(AttRec->Comment), (LPARAM) AttRec->Comment );

					// èÆ´„Á®‚Ï Ê•≠„ Ø‡®ß≠†™† (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_PRICE, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					AttRec->Price = (char) atoi ( buf );

					// èÆ´„Á®‚Ï ¢†¶≠Æ·‚Ï Ø‡®ß≠†™† (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_IMPORTANCE, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					AttRec->Importance = (char) atoi ( buf );

					// èÆ´„Á®‚Ï ®≠§•™· £®Ø•‡‚•™·‚† (Ø‡•Æ°‡†ßÆ¢†‚Ï ·‚‡Æ™„ ¢ Á®·´Æ)
					SendDlgItemMessage ( hwnd, IDD_HYPERINDEX, WM_GETTEXT, sizeof(buf), (LPARAM) buf );
					AttRec->HyperIndex = (DWORD) atol ( buf );

					if ( SendDlgItemMessage ( hwnd, IDD_HIDDEN, BM_GETCHECK, 0, 0L ) )
						AttRec->Style |= AVS_HIDDEN;
					if ( SendDlgItemMessage ( hwnd, IDD_GLOBAL, BM_SETCHECK, 0, 0L ) )
						AttRec->Style |= AVS_GLOBAL;

					EndDialog ( hwnd, 1 );
					break;
					}
				case IDCANCEL : {
					EndDialog ( hwnd, 0 );
					break;
					}
				case IDD_HIDDEN : {
					SendDlgItemMessage ( hwnd, IDD_HIDDEN, BM_SETCHECK, ! SendDlgItemMessage(hwnd,IDD_HIDDEN,BM_GETCHECK,0,0L), 0L );
					break;
					}
				case IDD_GLOBAL : {
					SendDlgItemMessage ( hwnd, IDD_GLOBAL, BM_SETCHECK, ! SendDlgItemMessage(hwnd,IDD_GLOBAL,BM_GETCHECK,0,0L), 0L );
					break;
					}
				default:
					return FALSE;
				}
		    break;
			}
		default :
			return FALSE ;
		}
	return TRUE;
	}

/*
⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥                                                            ≥ StructWndProc ≥
≥                                                            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ
*/
long FAR PASCAL _export StructWndProc ( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam ) {

	LPSTRUCT tis = (LPSTRUCT) GetMem ( hwnd );

    switch ( msg ) {

		case WM_GETMINMAXINFO  : {
			((LPPOINT) lParam)[3].x = 64;
			((LPPOINT) lParam)[3].y = 64;
			break;
			}
		case WM_CREATE         : {
			SetMem ( hwnd, (LPVOID) ( (LPMDICREATESTRUCT) ( (LPCREATESTRUCT) lParam )->lpCreateParams )->lParam );
			break;
			}
		case WM_MEASUREITEM    : {
			// é§®≠†™Æ¢†Ô ¢Î·Æ‚† §´Ô †‚‡®°„‚Æ¢ ® ß≠†Á•≠®©
			((LPMEASUREITEMSTRUCT) lParam) -> itemHeight = Frame.LBitemHight;
			break;
			}
		case WM_DRAWITEM       : {
			tis->DrawItem ( (LPDRAWITEMSTRUCT) lParam );
			break;
			}
		case WM_MDIACTIVATE    : {
			if ( wParam == TRUE ) {      // é™≠Æ ·‚‡„™‚„‡Î ·‚†≠Æ¢®‚·Ô †™‚®¢≠Î¨
				// á†£‡„ß®‚Ï ·ÆÆ‚¢•‚·‚¢„ÓÈ•• ¨•≠Ó, †™·•´•‡†‚Æ‡ ® ™„‡·Æ‡
				SendMessage ( Frame.hwndClient, WM_MDISETMENU, FALSE, MAKELONG ( STRUCT::hMenu, STRUCT::hWndMenu ) );
				Frame.hAccel = STRUCT::hAccel;
				if ( tis->SplitState == IDM_VIEWHORIZONTAL )
					SetClassWord ( hwnd, GCW_HCURSOR, STRUCT::HorCur );
				else
					SetClassWord ( hwnd, GCW_HCURSOR, STRUCT::VerCur );
				Frame.hwndActive = hwnd;
//				tis->SetFocus ( );
				}
			if ( wParam == FALSE ) {       // é™≠Æ ·‚‡„™‚„‡Î ‚•‡Ô•‚ †™‚®¢≠Æ·‚Ï
				// á†£‡„ß®‚Ï ‰‡•©¨Æ¢Î• ¨•≠Ó ® †™·•´•‡†‚Æ‡ (Ø‡® Æ‚·„‚·‚¢®® Æ™Æ≠)
				SendMessage ( Frame.hwndClient, WM_MDISETMENU, FALSE, MAKELONG ( Frame.FrmMenu, Frame.WndMenu ) );
				Frame.hAccel = Frame.hFrmAccel;
				Frame.hwndActive = 0;
				}
			DrawMenuBar ( Frame.hwndFrame );
			break;
			}
		case WM_SETFOCUS : {
			tis->SetFocus();
			break;
			}
		case WM_INITMENU : {
			tis->InitMenu();
			break;
			}
		case WM_SIZE     : {
			tis->Size ( wParam, lParam );
			break;
			}
		case WM_LBUTTONDOWN : {
			tis->PartMove ( WM_LBUTTONDOWN, lParam );
			break;
			}
		case WM_MOUSEMOVE : {
			tis->PartMove ( WM_MOUSEMOVE, lParam );
			break;
			}
		case WM_LBUTTONUP : {
			tis->PartMove ( WM_LBUTTONUP, lParam );
			break;
			}
		case WM_COMMAND : {
			switch( wParam ) {
				case CHANGE_TITLE    : {
					char buf[80] = TITLE_STRUCT;
					lstrcat ( buf, tis->KBase->GetNamePtr() );
					SetWindowText ( hwnd, buf );
					break;
					}
				// Ö·´® ÂÆ‚Ï Á‚Æ-´®°Æ ®ß¨•≠®´Æ·Ï ¢ ·‚‡„™‚„‡•, ‚Æ ß†≠Æ¢Æ Æ‚Æ°‡†¶†•¨
				// ¢·• ·Æ§•‡¶®¨Æ• Æ™≠† (≠•ß†¢®·®¨Æ Æ‚ ‚®Ø† ®ß¨•≠•≠®Ô). ù‚Æ ¨.°.
				// ≠•Ì‰‰•™‚®¢≠Æ, ß†‚Æ ≠†§•¶≠Æ. è‡® °Æ´•• ‚È†‚•´Ï≠Æ¨ ‡†··¨Æ‚‡•≠®®
				// ≠•Æ°ÂÆ§®¨Æ §´Ô ™†¶§Æ£Æ ·ÆÆ°È•≠®Ô Ø‡Æ¢•‡®‚Ï, §•©·‚¢®‚•´Ï≠Æ ´®
				// §†≠≠Æ• ®ß¨•≠•≠®• Æ‚‡†¶†•‚·Ô ¢ Æ™≠•. Ç Æ·≠Æ¢≠Æ¨ Ì‚Æ ™†·†•‚·Ô
				// Ø‡Æ¢•‡™® ≠Æ¨•‡Æ¢ ®ß¨•≠•≠≠ÎÂ †‚‡®°„‚† ®´® ß≠†Á•≠®Ô (≠†Ø‡®¨•‡,
				// ¢®§≠Î ´® Æ≠® ≠† Ì™‡†≠• ¢ ß†¢®·®¨Æ·‚® Æ‚ ¢®§†). è‡Æ¢•‡™„ •·‚Ï
				// ·¨Î·´ §•´†‚Ï ‚Æ´Ï™Æ §´Ô ß≠†Á•≠®© ¢ §¢„Æ™Æ≠≠Æ¨ ‡•¶®¨•, ™Æ£§†
				// Á†È• ¢·•£Æ ‚•™„È®© †‚‡®°„‚ ≠• ·Æ¢Ø†§†•‚ · ‚•¨, „ ™Æ‚Æ‡Æ£Æ ¨•≠Ô•‚·Ô
				// ß≠†Á•≠®•, † ß≠†Á®‚, ®ß¨•≠Ô•¨Æ• ß≠†Á•≠®• ≠• ØÆ™†ßÎ¢†•‚·Ô ≠† Ì™‡†≠•.
				// Ñ‡„£®¨® ·´Æ¢†¨®, ≠•Æ°ÂÆ§®¨Æ Æ‚·´•¶®¢†‚Ï ®ß¨•≠•≠®Ô ß≠†Á•≠®©
				// (‚‡® ·ÆÆ°È•≠®Ô). Ç ·´„Á†• Æ§≠ÆÆ™Æ≠≠Æ£Æ ‡•¶®¨† (NONEVIEW)
				// Ø‡Æ®·ÂÆ§®‚ °•ß„·´Æ¢≠†Ô Ø•‡•‡®·Æ¢™† (Á‚Æ°Î ≠• ¨„Á®‚Ï·Ô · ÆØ‡•§•´•≠®•¨
				// ¢®§®¨Æ·‚® ß≠†Á•≠®Ô ® •£Æ ¢´®Ô≠®Ô ≠† §‡„£®•). Ç Ø‡Æ‚®¢≠Æ¨ ·´„Á†•
				// (§¢„Æ™Æ≠≠Î© ‡•¶®¨) Ø•‡•‡®·Æ¢Î¢†•¨ Æ™≠Æ ß≠†Á•≠®© ‚Æ´Ï™Æ •·´®
				// ‚•™„È®© †‚‡®°„‚ ‚†™Æ© ¶• ™†™ ¢ ·ÆÆ°È•≠®®. ÇÆÆ°È•, ¢ÆØ‡Æ· ·´Æ¶≠••.
				// ç†Ø‡®¨•‡, ®ß¨•≠•≠®• ™Æ´®Á•·‚¢† ß≠†Á•≠®© ¨Æ¶•‚ ØÆ¢´®Ô‚Ï ≠†
				// ·Æ‡‚®‡Æ¢™„ †‚‡®°„‚Æ¢.
				case CHANGE_CONTENT  :
				case PUT_ATTRIBUTE   :
				case INS_ATTRIBUTE   :
				case DEL_ATTRIBUTE   :
				case PUT_VALUE       :
				case INS_VALUE       :
				case DEL_VALUE       : {
					tis->PrintOn();
					break;
					}
				case IDM_CHANGEWINDOW: {
					tis->ChangeWin();
					break;
					}
				case IDM_FILESAVE       : {
					tis->Save();
					break;
					}
				case IDM_FILESAVEAS     : {
					if ( FileSaveAs() ) {
						tis->KBase->RenameKBase ( FullPath );
						if ( LKE_SUCCESS != tis->KBase->SaveKBase() ) ErrorMessager ( 0, MB_OK | MB_ICONHAND | MB_SYSTEMMODAL, IDS_CANTSAVE );
						}
					break;
					}
				case IDM_VIEWHORIZONTAL : {
					tis->View ( IDM_VIEWHORIZONTAL );
					break;
					}
				case IDM_VIEWVERTICAL   : {
					tis->View ( IDM_VIEWVERTICAL );
					break;
					}
				case IDM_UNSORTED       : {
					if ( tis->isAttSelected() )
						if ( tis->KBase->GetAttSort() > 0 ) tis->KBase->SetAttSort ( SORT_UNSORTED );
						else                                tis->KBase->SetAttSort ( - SORT_UNSORTED );
					else
						if ( tis->KBase->GetValSort() > 0 ) tis->KBase->SetValSort ( SORT_UNSORTED );
						else                                tis->KBase->SetValSort ( - SORT_UNSORTED );
					tis->PrintOn();
					break;
					}
				case IDM_NAME           : {
					if ( tis->isAttSelected() )
						if ( tis->KBase->GetAttSort() > 0 ) tis->KBase->SetAttSort ( SORT_ALPHA );
						else                                tis->KBase->SetAttSort ( - SORT_ALPHA );
					else
						if ( tis->KBase->GetValSort() > 0 ) tis->KBase->SetValSort ( SORT_ALPHA );
						else                                tis->KBase->SetValSort ( - SORT_ALPHA );
					tis->PrintOn();
					break;
					}
				case IDM_PRICE          : {
					if ( tis->isAttSelected() )
						if ( tis->KBase->GetAttSort() > 0 ) tis->KBase->SetAttSort ( SORT_PRICE );
						else                                tis->KBase->SetAttSort ( - SORT_PRICE );
					else
						if ( tis->KBase->GetValSort() > 0 ) tis->KBase->SetValSort ( SORT_PRICE );
						else                                tis->KBase->SetValSort ( - SORT_PRICE );
					tis->PrintOn();
					break;
					}
				case IDM_IMPORTANCE     : {
					if ( tis->isAttSelected() )
						if ( tis->KBase->GetAttSort() > 0 ) tis->KBase->SetAttSort ( SORT_IMPORTANCE );
						else                                tis->KBase->SetAttSort ( - SORT_IMPORTANCE );
					else
						if ( tis->KBase->GetValSort() > 0 ) tis->KBase->SetValSort ( SORT_IMPORTANCE );
						else                                tis->KBase->SetValSort ( - SORT_IMPORTANCE );
					tis->PrintOn();
					break;
					}
				case IDM_VALUES         : {
					if ( tis->isAttSelected() ) {
						if ( tis->KBase->GetAttSort() > 0 ) tis->KBase->SetAttSort ( SORT_VALNUM );
						else                                tis->KBase->SetAttSort ( - SORT_VALNUM );
						tis->PrintOn();
						}
					break;
					}
				case IDM_CHARACTER      : {
					if ( tis->isValSelected() ) {
						if ( tis->KBase->GetValSort() > 0 ) tis->KBase->SetValSort ( SORT_CHARACTER );
						else                                tis->KBase->SetValSort ( - SORT_CHARACTER );
						tis->PrintOn();
						}
					break;
					}
				case IDM_REVERSE        : {
					if ( tis->isAttSelected() )
						tis->KBase->SetAttSort ( - tis->KBase->GetAttSort() );
					else
						tis->KBase->SetValSort ( - tis->KBase->GetValSort() );
					tis->PrintOn();
					break;
					}
				case IDM_ITEMADD        : {
					if ( tis->isAttSelected() ) tis->InsertAttribute();
					else                        tis->InsertValue();
					tis->SetFocus();
					break;
					}
				case IDM_ITEMEDIT       : {
					if ( tis->isAttSelected() ) tis->EditAttribute();
					else                        tis->EditValue();
					tis->SetFocus ( );
					break;
					}
				case IDM_ITEMDELETE     : {
					if ( tis->isAttSelected() ) tis->DeleteAttribute();
					else                        tis->DeleteValue();
					tis->SetFocus();
					break;
					}
				case IDM_HYPERTEXT  : {
					MOD_DESCR md;
					tis->KBase->GetModuleHead ( & md );
					if ( md.HyperFile[0] == 0 ) {
						ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_APPLMODAL, IDS_NOHYPERFILE );
						break;
						}

					ATT_REC ar;
					VAL_REC vr;
					DWORD idx;
					int Att = tis->KBase->GetCurAtt();
					int Val = tis->KBase->GetCurVal();
					if ( tis->isAttSelected() ) {
						if (  Att != -1 && Att != tis->KBase->AttNumber() ) {
							tis->KBase->GetAttribute ( Att, & ar );
							idx = ar.HyperIndex;
							}
						else break;
						}
					else if ( tis->isValSelected() ) {
						if ( Val != -1 && Val != tis->KBase->ValNumber ( Att ) ) {
							tis->KBase->GetValue ( Att, Val, & vr );
							idx = vr.HyperIndex;
							}
						else break;
						}
					else break;
					if ( idx == 0 ) {
						ErrorMessager  ( 0, MB_OK | MB_ICONHAND | MB_APPLMODAL, IDS_NOINDEX );
						break;
						}
					WinHelp ( hwnd, md.HyperFile, HELP_CONTEXT, idx );
					break;
					}
				case IDM_ATT_LISTBOX    : {
					if ( HIWORD ( lParam ) == LBN_DBLCLK ) {
                        if ( tis->SplitState != IDM_VIEWNONE )
							if ( tis->KBase->GetCurAtt() != tis->KBase->AttNumber() )
								SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMEDIT, 0L );
							else SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMADD, 0L );
						else
							if ( tis->KBase->GetCurVal() == -1 )
								if ( tis->KBase->GetCurAtt() != tis->KBase->AttNumber() )
									SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMEDIT, 0L );
								else SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMADD, 0L );
							else if ( tis->KBase->GetCurVal() != tis->KBase->ValNumber ( tis->KBase->GetCurAtt() ) )
									SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMEDIT, 0L );
								else SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMADD, 0L );
						break;
						}
					if ( HIWORD ( lParam ) == LBN_SETFOCUS ) {
						if ( tis->SplitState != IDM_VIEWNONE )
							tis->CurFocus = IDM_ATT_LISTBOX;
						break;
						}
					if ( HIWORD ( lParam ) == LBN_SELCHANGE ) {
						int idx = SendMessage ( LOWORD(lParam), LB_GETCURSEL, 0, 0L);
						if ( tis->SplitState == IDM_VIEWNONE ) {
							tis->KBase->SetCurAtt ( tis->NoneIdx2Att ( idx ) );
							tis->KBase->SetCurVal ( tis->NoneIdx2Val ( idx ) );
							}
						else if ( idx != tis->KBase->GetCurAtt() ) {
							tis->KBase->SetCurAtt ( idx );
							tis->KBase->SetCurVal ( -1 );
							tis->FillValListBox ( tis->KBase->GetCurAtt() );
							}
						break;
						}
					break;
					}
				case IDM_VAL_LISTBOX    : {
					if ( HIWORD ( lParam ) == LBN_DBLCLK ) {
						if ( tis->SplitState != IDM_VIEWNONE )
							if ( tis->KBase->GetCurVal() != tis->KBase->ValNumber ( tis->KBase->GetCurAtt() ) )
								SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMEDIT, 0L );
							else SendMessage ( Frame.hwndFrame, WM_COMMAND, IDM_ITEMADD, 0L );
						break;
						}
					if ( HIWORD ( lParam ) == LBN_SETFOCUS ) {
						if ( tis->SplitState != IDM_VIEWNONE )
							tis->CurFocus = IDM_VAL_LISTBOX;
						break;
						}
					if ( HIWORD ( lParam ) == LBN_SELCHANGE ) {
						int idx = SendMessage ( LOWORD ( lParam ), LB_GETCURSEL, 0, 0L);
						if ( tis->SplitState != IDM_VIEWNONE ) {        // !!! à ≠• ¨Æ¶•‚ °Î‚Ï ‡†¢≠Æ
							tis->KBase->SetCurVal ( idx );
							}
						break;
						}
					break;
					}

				default : goto CallDCP;
				}
			break;
			}

		case WM_CLOSE   : {
			if ( tis->Close() ) {                // Ö·´® §•©·‚¢®‚•´Ï≠Æ ß†™‡Î´®
				goto CallDCP;                                  // á†™‡Î‚Ï Æ™≠Æ
				}
			break;
			}

		default :
CallDCP:
			return DefMDIChildProc ( hwnd, msg, wParam, lParam );
		}
	return FALSE;
	}
