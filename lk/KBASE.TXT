=============================================================================
Класс KBASE
=============================================================================

Поле View влияет только на рассылку сообщений о перерисовке, а также
определяет принадлежность текущих номеров атрибута и значения.
Принадлежность номеров атрибутов и значений важна только при их
смене, т.е., при переходе к следующему, предыдущему и т.п. Доступ же
ко всем элементам (атрибуты, значения, высказывания знаний, данных и
заключений) происходит независимо от текущих номеров. Правда
предполагается, что обычно для доступа будут использоваться именно
текущие значения, однако это вовсе не обязательно, т.к., их надо
указывать явно. Система гарантирует, что текущие номера всегда
корректны в смысле соответствия виду окна (поле View), т.е.,
высказывание о текущем атрибуте обязательно существует в данных,
заключении или правиле.

Текущие номера атрибута и значения являются абсолютными, что
позволяет обойти некоторые проблемы связанные с редактированием
структуры в разных окнах. Однако, пользователю всегда возвращается
отсортированное значение и все функции, которые требуют в качестве
параметра атрибут и значение используют только отсортированные
их номера.

Для доступа к данным, заключениям и знаниям существуют параллельные
функции, например, DataProp2Att, DataAtt2Prop, KnowInsProp,
KnowDelProp, ConcInvertProp, DataGetComp. Эти функции используют явно
указанный номер атрибута (и значения) в соответствии с текущей
сортировкой. Для доступа к правилам используется указатель на текущее
правило. Эти функции никак не испоьзуют установленный вид (только для
того, чтобы сообщить что-то другим окнам).


Функции манипулирования объектом
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ OpenKBase

Это статическая функция. Она может (и должна) вызываться, когда
ни одного объекта еще нет. Но даже если они уже есть, то она все равно
вызывается безотносительно какого-либо существующего. Ей передается
строка полного пути файла базы знаний, а возвращается указатель на
объект, который в дальнейшем должен использоваться при вызове
всех функций над базой знаний. Если объект не может быть создан,
то возвращается нулевой указатель и устанавливается код ошибки.

■ CloseKBase

Уничтожается существующий объект.

■ SaveKBase

Сохранение содержимого объекта из памяти в файл на диске. Если объект
не именован, то сохранения не происходит и возвращается ошибка.

■ RenameKBase

Существующий объект переыменовывается, т.е. меняется его полный путь
файла и имя файла. Строка должна обязательно представлять полный
путь. Эта операция затрагивает все окна данного файла,
поэтому всем им посылается сообщение о смене заголовка.
Более того, если файл с новым именем уже существует и открыт, то
все его окна перекидываются на данный файл с потерей их содержимого
(содержимого объекта в памяти, а не в файле на диске). Вообще, полезно
проверять, существует ли уже файл с новым именем. Поле сохраненности
не меняется. При перекидывании объектов KBASE окнам посылается
соответствующее сообщение (из функции MoveKBase), которое может
использоваться для отражения нового содержимого.

■ MoveKBase

Перемещение данного объекта KBASE новому хозяину, причем
предполагается, что новый хозяин имеет другую структуру, поэтому
исчезают данные, заключения, сбрасываются указатель на правило,
текущие номера и т.п. После перемещения окну посылается сообщение
о полной перерисовке (в т.ч. заголовка).

При переносе можно варьировать способ смены текущих параметров.
Самый простой из них это полный сброс, как при открытии файла.
Более сложный это попытка насколько это возможно сохранить
текущие значения, например, текущий атрибут, значение и правило.
В любом случае единственное, что не меняется это ключ окна и
вид.

■ IsKBaseNamed

Является ли объект новым, т.е., соответствует ли ему реальный файл на
диске или этот объект находится только в памяти.

■ IsKBaseSaved

Сохранялось ли содержимое объекта в файле базы знаний или нет.

■ SetWindow
■ GetWindow

Установить или вернуть текущий ключ окна, в котором показывается
объект. При инициализации устанавливается равным 0.

■ SetView
■ GetView

Установить или вернуть текущий вид. При смене вида между знаниями,
данными и заключенями может измениться текущий номер атрибута и значения.
В простейшем случае номера атрибута и значения сбрасываются до -1.
В более сложном случае делается попытка сохранить старые номера насколько
это возможно.


Групповые функции (списочные)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ firstThat
■ lastThat

Найти первый (последний) объект KBASE, принадлежащий данному списку
(т.е., относящийся к данному открытому файлу) и удовлетворяющий
условию.

■ forEach

Выполнить функцию указатель на которую передается в качестве
параметра для каждого объекта KBASE (т.е., для каждого открытого окна
данного файла).

■ KBFilesNumber

Количество открытых файлов, т.е., общее количество существующих в
настоящее время объектов в списке.

■ KBaseNumber

Количество открытых окон для данного объекта, т.е., количество
объектов класса KBASE находящихся в списке данного объекта.
Учитывается также данное окно.


Функции манипулирования и доступа к атрибутам
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ GetAttribute

Получить описание атрибута. В качестве параметра передается
упорядоченный в соответствии в текущей сортировкой номер атрибута
а также указатель на запись, куда надо положить описание атрибута.
В другом варианте берется номер текущего атрибута и возвращается
его описание. Возвращается сообщение об ошибке. Номер атрибута должен быть
правильно указан, т.е. не быть меньше 0 и больше либо равным
количеству атрибутов.

Более простая версия использует в качестве номера текущий номер
атрибута. При этом также достигается оптимизация поскольку
сразу используется абсолютный номер без преобразований. Другими
словами, текущая сортировка не используется, а считается, что
текущий абсолютный номер правильно установлен.

■ PutAttribute

Изменить описание текущего атрибута. Текущий атрибут не меняется,
но может поменяться его относительный номер. Поле numVal не имеет
значения, оно не меняется. Всем окнам посылается сообщение об изменении
параметров атрибута.

■ InsAttribute

Вставить атрибут перед текущим. В качестве параметра передается указатель
на описание атрибута. Общее количество атрибутов увеличивается на 1. Если
атрибут с таким именем уже существует, то возвращается ошибка.
Меняется сортировка и всем окнам передается соответствующее
сообщение. Вставленный атрибут становится текущим, но из-за сортировки
может оказаться в любом месте списка. В других окнах
текущий атрибут не меняется.

■ DelAttribute

Удалить текущий атрибут. Общее количество атрибутов уменьшается на 1.
В данном окне текущим становится следующий в упорядоченном списке
атрибут (который становится на его место). В других окнах текущий
атрибут не меняется если только он не является текущим.
Всем окнам передается соответствующее сообщение.

■ AttNumber

Общее количество атрибутов.

■ GetCurAtt
■ SetCurAtt

Получить номер текущего атрибута (относительный). Функция
получения возвращает упорядоченный относительно текущей
сортировки номер атрибута, который может быть использован для
доступа к его описания. Именно доступ к описанию является основной
целью функции получения текущего атрибута. Не следует путать эту
функцию с функцией получения текущей позиции, результат которой
зависит от текущего вида.

При установке атрибута указывается относительный номер, однако
результат зависит от текущего вида. При установке атрибут
приравнивается к ближайшему допустимому
(для данных, правил, заключений), поэтому он может измениться.
Кроме того, если указанный номер выходит за допустимые пределы
(зависят от опции использования -1), то он устанавливается
равным ближайшему крайнему значению (0, -1 или количество
атрибутов). При установке текущего атрибута может поменяться
текущее значение: в случае если включена опция сброса значения
при смене атрибута (0 или -1), а если выключена, то если номер
значения не попадает в допустимый диапазон (0, -1 или количество
значений нового атрибута).

Функция GetCurAtt используется в основном, для того, чтобы узнать
номер текущего атрибута, который может быть использован для получения
его описания через функцию GetAttribute(). Функция SetCurAtt
вряд ли для чего может быть использована, поскольку для установки
обычно используется не номер атрибута, а положение в списке. Другими
словами, установка исходит от пользователя, который видит не номера
атрибутов, а их положение в списке. Соответственно для установки
удобнее использовать функцию SetCurAttPos. При просмотре структуры
эти две функции идентичны функциям получения и установки позиции,
поскольку в списке присутствуют все атрибуты.

■ GetCurAttPos
■ SetCurAttPos
■ NextAttPos
■ PrevAttPos

Использование этих функций основано на том, что есть упорядоченный
список, состоящий из некоторых атрибутов. При просмотре структуры
он включает все атрибуты, а в других случаях только те, которые
имеются в текущем утверждении. Основное ограничение на текущий
атрибут состоит в том, что им может быть только тот, который
имеется в списке (а значит и в утверждении).

Параметры и возвращаемые значения этих функций -- это не номера
атрибутов, а положение в их упорядоченном списке. Эти два понятия
совпадают только при просмотре структуры.

Общая процедура использования функций текущего атрибута и позиции
такова. Функции позиции используются для перемещения по списку,
например, для полного прохода по списку при заполнении ListBox'а,
или при гулянии по списку с помощью курсора. Функция же получения
номера атрибута используется только если необходимо узнать
идентификатор (упорядоченный номер) текущего атрибута в списке.
Это, например, необходимо для доступа к описанию атрибута при
заполнении ListBox'а.

■ GetAttSort
■ SetAttSort

Установить и получить информацию о текущей сортировке атрибутов и ее
направлении. Сортировка "как в правиле" недопустима при просмотре
структуры и в этом случае устанавливается отсутствие сортировки.
Также недопустима сортировка по характерности, в этом случае она
не меняется.

Функции манипулирования и доступа к значениям
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ GetValue

Получить описание значения. В качестве параметра передается
относительные номера атрибута и значенимя. Вторая версия функции
использует текущие номера атрибута и значения.

■ InsValue

Вставить значение перед другим. В качестве параметра передается
ссылка на описание значения и относительный номер атрибута и значения
перед которым надо вставить. Общее количество значений и количество
значений данного атрибута увеличиваются на 1. Если значение с таким
именем уже существует, то возвращается ошибка. Меняется сортировка и
всем окнам передается соответствующее сообщение.

■ DelValue

Удалить значение с данным отсортированным номером атрибута и
значения.  Общее количество значений и количество значений данного
атрибута уменьшается на 1. Всем окнам передается соответствующее
сообщение.

■ ValNumber

Общее количество значений для данного атрибута. Номер атрибута
является отсортированным.

■ ValPosSum

Функция для определения суммы значений признаков с нулевой до указанной
позиции (не включая значения указанного атрибута). Вычисляется сумма
значений всех признаков которые стоят в упорядоченном списке строго
до указанного. Дырки в списки, определяемые текущим видом, не учитываются
при подсчете. Фактически является смещением до начала значений
указанного признака если они упорядоченны в соответствии с текущей
сортировкой. Чтобы узнать общее количество значений в списке, необходимо
указать номер позиции, равный их общему количеству. В случае просмотра
структуры это количество атрибутов, иначе -- количество высказываний.

■ GetCurVal
■ SetCurVal
■ NextVal
■ PrevVal

Вернуть или установить текущий номер значения. В любых видах
устанавливается указанное значение если оно не выходит за
допустимые для текущего атрибута пределы. В этом случае оно
устанавливается равным ближайшему крайнему значению (0, -1 или
количество значений текущего атрибута). Номер значения одновременно
равен и позиции в упорядоченном списке значений.

■ GetValSort
■ SetValSort

Установить и получить информацию о текущей сортировке значений и ее
направлении. Сортировка "как в правиле" и по количеству значений
недопустима и в этом случае она не меняется.

Функции манипулирования и доступа к правилам
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

■ InsRule

Вставить пустое правило перед текущим. Общее количество правил
увеличивается на 1. Кроме того, увеличивается общая длина.
Соответствующим окнам передается сообщение.

■ DelRule

Удалить текущее правило. Общее количество правил уменьшается на 1, а
также уменьшается общая длина правил. Соответствующим окнам
передается сообщение.

■ RuleNumber

Количество правил в базе знаний.

■ GetCurRule
■ SetCurRule
■ NextRule
■ PrevRule

Вернуть или установить номер текущего правила. Номер не может быть
равен -1, но может равняться общему числу правил.

■ isRuleDisjunct
■ SetRuleDisjunct

Определяет либо устанавливает дизъюнктивность текущего правила.

Функции манипулирования и доступа к высказываниям
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Все функции доступа к высказываниям имеют смысл только при
просмотре знаний, данных и заключений (кроме структуры).
При этом результат выполнения функций зависит от текущего вида
(знания, данные или заключения). Если просматриваются знания,
то функции применяется к текущему правилу.

■ InsProp

Вставить тривиальное высказывание о заданном атрибуте перед текущим.
В качестве параметра передается упорядоченный номер вставляемого
атрибута. Увеличивается количество высказываний в утверждении (правиле,
данных или заключении). Номера атрибутов заданы относительно текущей
сортировки и ее направления. Если вставляемый атрибут уже есть (либо
отсутствует тот перед которым необходимо вставить?), то возвращается
ошибка. Всем окнам которые могут отображать новое высказывание
передается сообщение.

■ DelProp

Удалить высказывание о текущем атрибуте правила, данных или заключений.
Уменьшается общее количество высказываний. Соответствующим окнам
(могущим отображать удаляемое высказывание) передается сообщение.

■ InvertProp

Инвертирование текущего высказывания. В результате меняются
компоненты высказывания и его модальность. Соответствующим окнам
передается сообщение.

■ PropNumber

Количество высказываний в текущем правиле, данных или заключениях
в зависимости от текущего вида. Фактически равно количеству позиций
в списке с дырками. При виде на структуру возвращает количество
атрибутов. Можно использовать вместе с функциями получения и установки
позиции.

■ isPropConjunct
■ SetPropConjunct

Определяет либо устанавливает конъюнктивность высказывания
в правиле, данных или заключениях (в зависимости от текущего
вида).

■ SetComp
■ GetComp

Получить или установить компоненту, заданную относительным номером
атрибута и значения.
















■ KnowProp2Att

Упорядоченный в соответствии с текущей сортировкой номер высказывания
текущего правила преобразуется в также упорядоченный номер атрибута
этого высказывания. Можно представить, что все атрибуты упорядочены
(кроме сортировки "как в правиле") и среди них выделены те, которые
входят в текущее правило. Последние имеют как сквозные номера (в
соответствии с общим списком), так и относительные (когда
рассматриваются только входящие в правило). Причем и те и другие
номера монотонны, т.е., если один номер увеличился, то и другой тоже.
Эта функция преобразует относительный номер высказывания в сквозной
номер атрибута. Если указана сортировка "как в правиле", то
сортировка общего списка не имеет значения, а используется порядок
расположения высказываний в правиле. При этом возвращаемый номер
атрибута является абсолютным, т.е., соответствует отсутствию
сортировки. В этом случае возрастание номера высказывания может
приводить к произвольному изменению номера атрибута.

■ KnowAtt2Prop

Упорядоченный в соответствии с текущей сортировкой номер атрибута
некоторого высказывания текущего правила преобразуется в также
упорядоченный номер высказывания. Можно представить, что все атрибуты
упорядочены (кроме сортировки "как в правиле") и среди них выделены
те, которые входят в правило.  Последние имеют как сквозные номера (в
соответствии с общим списком), так и относительные (когда
рассматриваются только входящие в правило). Эта функция преобразует
сквозной номер атрибута в относительный номер высказывания. Если
указана сортировка "как в правиле", то сортировка общего списка не
имеет значения, а используется порядок расположения высказываний в
правиле. Если указанного атрибута нет в правиле, то возвращается
ошибка.


Функции логического вывода
~~~~~~~~~~~~~~~~~~~~~~~~~~


